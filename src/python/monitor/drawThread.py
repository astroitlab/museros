#coding=utf-8import queueMsg,timeimport correlation as corimport autoCorrelation as autoimport pathConvertImage as pathimport rawData as rawimport dataThread as datafrom PyQt4 import QtCore,QtGuiimport numpy as npclass DrawImageThread(QtCore.QThread):    width = 0    height = 0    flag = True    def __init__(self,imageType):        QtCore.QThread.__init__(self)        self.imageType = imageType        self.dataThread = data.DataThread()        self.dataThread.start()    def setFlag(self):        self.flag = True    def clearFlag(self):        self.flag = False    def sender(self,width,height):        self.width = width        self.height = height        self.start()    def run(self):        while(self.flag):            if(queueMsg.QUEUE_MSG.empty() != True):                imageData = queueMsg.QUEUE_MSG.get()                var = self.paintImage(imageData,self.imageType)                self.emit(QtCore.SIGNAL('output(PyQt_PyObject)'),var)            time.sleep(1)    def paintImage(self,imageData,imageType):        imageList = []        corrFileName = imageData[0]['crossValue']        convertData = np.fromfile(corrFileName)        if imageType == 'vis':            #convertData = raw.RawData(imageData)            createImage = cor.CreatePixmap(960,960)            for i in range(16):                imageList.append(createImage.paint(i,convertData))        elif imageType == 'acv':            aImage = auto.CreateImage(960,960)            for i in range(imageData.shape[0]):                imageList.append(aImage.paintImage(i,imageData))        elif imageType == 'png':            convert = path.Convert()            n_path = convert.netpathConvertLocalpath(imageData)            for i in range(len(n_path)):                imageList.append(QtGui.QImage(n_path[i]))        return imageList