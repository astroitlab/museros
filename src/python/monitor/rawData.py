#coding=utf-8import math as mimport numpy as nyCHENNAL_NUM = 16ANGLE  = 180/3.1415926class RawData(object):    def __init__(self,dataArray):        self.dataArray = dataArray        self.correlationValue  =  ny.ndarray(shape=(dataArray.shape[0]-4,dataArray.shape[1]-4,dataArray.shape[2]),dtype='float32')        self.positionValue  =  ny.ndarray(shape=(dataArray.shape[0]-4,dataArray.shape[1]-4,dataArray.shape[2]),dtype='float32')        self.maxCorrelationValue = ny.ndarray(shape=(dataArray.shape[2],1),dtype='float32')        self.minCorrelationValue = ny.ndarray(shape=(dataArray.shape[2],1),dtype='float32')        self.maxPositionValue = ny.ndarray(shape=(dataArray.shape[2],1),dtype='float32')        self.minPositionValue = ny.ndarray(shape=(dataArray.shape[2],1),dtype='float32')        self.init()    def maxCorrelation(self):        for channel in range(self.dataArray.shape[2]):            self.maxCorrelationValue[channel]=0            for antennas1 in range(self.dataArray.shape[0]-4):                for antennas2 in range(antennas1+1,self.dataArray.shape[1]-4):                    sqrt = m.log10(m.pow(self.dataArray[antennas1][antennas2][channel].real, 2)+m.pow(self.dataArray[antennas1][antennas2][channel].imag, 2))                    if self.maxCorrelationValue[channel]  < sqrt:                        self.maxCorrelationValue[channel] = sqrt    def minCorrelation(self):        for channel in range(self.dataArray.shape[2]):            self.minCorrelationValue[channel] = m.pow(self.dataArray[0][1][channel].real, 2)+m.pow(self.dataArray[0][1][channel].imag, 2)            for antennas1 in range(self.dataArray.shape[0]-4):                for antennas2 in range(antennas1+1,self.dataArray.shape[1]-4):                    sqrt = m.log10(m.pow(self.dataArray[antennas1][antennas2][channel].real, 2)+m.pow(self.dataArray[antennas1][antennas2][channel].imag, 2))                    if self.minCorrelationValue[channel]  > sqrt:                        self.minCorrelationValue[channel] = sqrt    def maxPosition(self):        for channel in range(self.dataArray.shape[2]):            self.maxPositionValue[channel]=0            for antennas1 in range(self.dataArray.shape[0]-4):                for antennas2 in range(antennas1+1,self.dataArray.shape[1]-4):                    atan2 = m.atan2(self.dataArray[antennas1][antennas2][channel].imag, self.dataArray[antennas1][antennas2][channel].real)*ANGLE                    if self.maxPositionValue[channel]  < atan2:                        self.maxPositionValue[channel] = atan2    def minPosition(self):        for channel in range(self.dataArray.shape[2]):            self.minPositionValue[channel] = m.atan2(self.dataArray[0][1][channel].imag, self.dataArray[0][1][channel].real)*ANGLE            for antennas1 in range(self.dataArray.shape[0]-4):                for antennas2 in range(antennas1+1,self.dataArray.shape[1]-4):                    atan2 = m.atan2(self.dataArray[antennas1][antennas2][channel].imag, self.dataArray[antennas1][antennas2][channel].real)*ANGLE                    if self.minPositionValue[channel]  > atan2:                        self.minPositionValue[channel] = atan2                            def correlation(self):        for channel in range(self.dataArray.shape[2]):            for antennas1 in range(self.dataArray.shape[0]-4):                for antennas2 in range(antennas1+1,self.dataArray.shape[1]-4):                    real = self.dataArray[antennas1][antennas2][channel].real                    imag = self.dataArray[antennas1][antennas2][channel].imag                    sqrt = real*real+imag*imag                    self.correlationValue[antennas1][antennas2][channel] = m.log10(sqrt)    def position(self):        for channel in range(self.dataArray.shape[2]):            for antennas1 in range(self.dataArray.shape[0]-4):                for antennas2 in range(antennas1+1,self.dataArray.shape[1]-4):                    real = self.dataArray[antennas1][antennas2][channel].real                    imag = self.dataArray[antennas1][antennas2][channel].imag                    atan2 = m.atan2(imag, real)*ANGLE                    self.positionValue[antennas1][antennas2][channel] = atan2    def init(self):        self.maxCorrelation()        self.minCorrelation()        self.maxPosition()        self.minPosition()        self.correlation()        self.position()