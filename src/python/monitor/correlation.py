#coding=utf-8from __future__ import division import time as tfrom queueMsg import *from PyQt4 import QtGui,QtCoreclass CreatePixmap(object):    def __init__(self,width,height):        self.width = width        self.height = height    def getTime(self):        return t.strftime('%Y-%m-%d %H:%M:%S',t.localtime(t.time()))    def createImageList(self,dataArray):        imageList = []        for i in range(dataArray.dataArray.shape[2]):            imageList.append(self.paint(i,dataArray))        return imageList    def paint(self,channel,dataArray):        d_array = dataArray.dataArray        image = QtGui.QImage(self.width,self.height,QtGui.QImage.Format_RGB32)   #定义画布        painter = QtGui.QPainter(image)  #定义painter        painter.setFont(QtGui.QFont("Courier New",18))        painter.setPen(QtCore.Qt.white)#设置初始画笔        painter.setBrush(QtCore.Qt.white)#设置初始画刷        painter.drawRect(0,0,self.width,self.height)#在画布上绘制一个初始的图        #定义文本高度        metrics=painter.fontMetrics();        textHeight=metrics.ascent()+metrics.descent();        #图到画布的边距        p_width = 3*textHeight        p_height = 5*textHeight        p_w = self.width-2*p_width#绘制图的宽        p_h = self.height-2*p_height#绘制画的高        #将画布均分，成为小格子               data_x = p_w/(60)#均分小格子的宽        data_y = p_h/(60)#均分小格子的高        #重定义坐标原点        painter.translate(p_width,p_height+textHeight)        #定义数据源        #绘制互相关        mid =  (dataArray.maxCorrelationValue[channel] - dataArray.minCorrelationValue[channel])/2         midtemp = (mid - dataArray.minCorrelationValue[channel])*(255/(dataArray.maxCorrelationValue[channel] - dataArray.minCorrelationValue[channel]))        print mid        for antennas1 in range(Antennas-1):            for antennas2 in range(antennas1+1, Antennas):                deltaC = 255/(dataArray.maxCorrelationValue[channel] - dataArray.minCorrelationValue[channel])                temp = (dataArray.correlationValue[antennas1][antennas2][channel] - dataArray.minCorrelationValue[channel])*deltaC                if(temp<=midtemp):                    painter.setPen(QtGui.QColor(int(temp),0,0))                    painter.setBrush(QtGui.QColor(int(temp),0,0,255))                    painter.drawRect(antennas1*data_x,antennas2*data_y,data_x,data_y)                else:                    painter.setPen(QtGui.QColor(255,int(temp),0))                    painter.setBrush(QtGui.QColor(255,int(temp),0,255))                    painter.drawRect(antennas1*data_x,antennas2*data_y,data_x,data_y)        #绘制相位相关        for antennas1 in range(d_array.shape[0]-4):            for antennas2 in range(antennas1+1,d_array.shape[1]-4):                deltaC = 255/(dataArray.maxPositionValue[channel]-dataArray.minPositionValue[channel])                temp = (dataArray.positionValue[antennas1][antennas2][channel] - dataArray.minPositionValue[channel])*deltaC                painter.setPen(QtGui.QColor(255,int(temp),0))                painter.setBrush(QtGui.QColor(255,int(temp),0,255))                painter.drawRect(antennas2*data_x,antennas1*data_y,data_x,data_y)        #绘制色系渐变条               c_sum = int((p_w*3/4)/data_x)        for i in range(c_sum):            painter.setPen(QtGui.QColor(255,i*int(255/c_sum),0))            painter.setBrush(QtGui.QColor(255,i*int(255/c_sum),0))            painter.drawRect(p_w/8+i*data_x,-2*textHeight,data_x,1.5*data_y)            painter.drawRect(p_w/8+i*data_x,p_h+2*textHeight,data_x,1.5*data_y)        #绘制分割线               painter.setPen(QtCore.Qt.white)        painter.drawLine(int((d_array.shape[0]-4)/3)*data_x,0,int((d_array.shape[0]-4)/3)*data_x,p_h)        painter.drawLine(int((d_array.shape[0]-4)*2/3)*data_x,0,int((d_array.shape[0]-4)*2/3)*data_x,p_h)        painter.drawLine(0,int((d_array.shape[1]-4)/3)*data_y,p_w,int((d_array.shape[1]-4)/3)*data_y)        painter.drawLine(0,int((d_array.shape[1]-4)*2/3)*data_y,p_w,int((d_array.shape[1]-4)*2/3)*data_y)        #绘制边框线               painter.setPen(QtCore.Qt.black);        painter.drawLine(0,0,p_w,0)        painter.drawLine(0,0,0,p_h)        painter.drawLine(p_w,0,p_w,p_h)        painter.drawLine(0,p_h,p_w,p_h)                #绘制横纵轴数        # painter.drawText(-metrics.width('IA0'),textHeight,'IA0')        #        # painter.drawText(-metrics.width('IA13'),(d_array.shape[0]-4)*data_y/3,'IA13')        #        # painter.drawText(-metrics.width('IB13'),(d_array.shape[0]-4)*data_y*2/3,'IB13')        #        # painter.drawText(-metrics.width('IC13'),p_h,'IC13')        #        # painter.drawText(0,p_h+textHeight,'IA0')        #        # painter.drawText((d_array.shape[0]-4)*data_x/3,p_h+textHeight,'IA13')        #        # painter.drawText((d_array.shape[0]-4)*data_x*2/3,p_h+textHeight,'IB13')        #        # painter.drawText(p_w,p_h+textHeight,'IC13')        #                        #绘制相关性和相位相关性参数        painter.drawText(p_w/8-metrics.width(str(-180)),-textHeight,str(-180))        painter.drawText(p_w*7/8,-textHeight,"+180")        painter.drawText(p_w/8-metrics.width(str(int(dataArray.minCorrelationValue[channel]))),p_h+3*textHeight,str(int(dataArray.minCorrelationValue[channel])))        painter.drawText(p_w*7/8,p_h+3*textHeight,str(int(dataArray.maxCorrelationValue[channel])))                #绘制文本        painter.drawText(0,-4*textHeight,'NO: '+str(channel)+'           DATE: '+self.getTime())        painter.drawText(0,-3*textHeight,'Radion Rrequency: '+str(''))                painter.end()               return image                