#coding=utf-8'''Created on 2014年8月15日@author: Ruyao KenShin'''import zmqimport time as timport ConfigParserimport queueMsg,time,randomfrom PyQt4 import QtCoreclass DataThread(QtCore.QThread):    flag = True    count = 0    def __init__(self,parent=None):        QtCore.QThread.__init__(self, parent)        try:            config=ConfigParser.ConfigParser()            config.read('text.ini')            HOST1=config.get("address1","HOST")            PORT1=config.get("address1","PORT")            self.ADDR=(HOST1,PORT1)            self.mode=config.get("rotation mode","mode1")            self.fre=config.get("frequency","frequency")            self.context = zmq.Context()            self.socket = self.context.socket(zmq.SUB)            self.socket.setsockopt(zmq.SUBSCRIBE,'')            self.socket.connect ("tcp://%s:%s" % self.ADDR)            print ('address=%s port=%s') % (HOST1,PORT1)        except:            print "can't to connecting the first server  trying to connecting the reserve server"            try:                HOST2=config.get("address2","HOST")                PORT2=config.get("address2","PORT")                print ('address=%s port=%s') % (HOST2,PORT2)                self.ADDR=(HOST2,PORT2)                self.mode=config.get("rotation mode","mode1")                self.fre=config.get("frequency","frequency")                self.context = zmq.Context()                self.socket = self.context.socket(zmq.SUB)                self.socket.setsockopt(zmq.SUBSCRIBE,'')                self.socket.connect ("tcp://%s:%s" % self.ADDR)            except:                print "can't to connecting the reserve server"        print "Collecting updates from server..."    def setFlag(self):        self.flag = True    def clearFlag(self):        self.flag = False    def rece(self,s):        get=self.socket.recv()        if len(get)<10:            head=get        else:            head=self.socket.recv_string()        if head==s:            data=self.socket.recv_pyobj()            return data        else:            return None    def run(self):        while(self.flag):            self.socket.recv()            data = self.socket.recv_pyobj()            print len(data), data            if len(data)==8 or len(data)==66:                queueMsg.QUEUE_MSG.put(data)                print t.strftime('%Y-%m-%d %H:%M:%S',t.localtime(t.time()))            self.count = queueMsg.QUEUE_MSG.qsize()            time.sleep(1)        