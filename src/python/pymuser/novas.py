# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_novas', [dirname(__file__)])
        except ImportError:
            import _novas
            return _novas
        if fp is not None:
            try:
                _mod = imp.load_module('_novas', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _novas = swig_import_helper()
    del swig_import_helper
else:
    import _novas
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Cat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cat, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_Cat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_Cat
    __del__ = lambda self : None;
    __swig_setmethods__["catalog"] = _novas.Cat_catalog_set
    __swig_getmethods__["catalog"] = _novas.Cat_catalog_get
    if _newclass:catalog = _swig_property(_novas.Cat_catalog_get, _novas.Cat_catalog_set)
    __swig_setmethods__["starname"] = _novas.Cat_starname_set
    __swig_getmethods__["starname"] = _novas.Cat_starname_get
    if _newclass:starname = _swig_property(_novas.Cat_starname_get, _novas.Cat_starname_set)
    __swig_setmethods__["starnumber"] = _novas.Cat_starnumber_set
    __swig_getmethods__["starnumber"] = _novas.Cat_starnumber_get
    if _newclass:starnumber = _swig_property(_novas.Cat_starnumber_get, _novas.Cat_starnumber_set)
    __swig_setmethods__["ra"] = _novas.Cat_ra_set
    __swig_getmethods__["ra"] = _novas.Cat_ra_get
    if _newclass:ra = _swig_property(_novas.Cat_ra_get, _novas.Cat_ra_set)
    __swig_setmethods__["dec"] = _novas.Cat_dec_set
    __swig_getmethods__["dec"] = _novas.Cat_dec_get
    if _newclass:dec = _swig_property(_novas.Cat_dec_get, _novas.Cat_dec_set)
    __swig_setmethods__["promora"] = _novas.Cat_promora_set
    __swig_getmethods__["promora"] = _novas.Cat_promora_get
    if _newclass:promora = _swig_property(_novas.Cat_promora_get, _novas.Cat_promora_set)
    __swig_setmethods__["promodec"] = _novas.Cat_promodec_set
    __swig_getmethods__["promodec"] = _novas.Cat_promodec_get
    if _newclass:promodec = _swig_property(_novas.Cat_promodec_get, _novas.Cat_promodec_set)
    __swig_setmethods__["parallax"] = _novas.Cat_parallax_set
    __swig_getmethods__["parallax"] = _novas.Cat_parallax_get
    if _newclass:parallax = _swig_property(_novas.Cat_parallax_get, _novas.Cat_parallax_set)
    __swig_setmethods__["radialvelocity"] = _novas.Cat_radialvelocity_set
    __swig_getmethods__["radialvelocity"] = _novas.Cat_radialvelocity_get
    if _newclass:radialvelocity = _swig_property(_novas.Cat_radialvelocity_get, _novas.Cat_radialvelocity_set)
Cat_swigregister = _novas.Cat_swigregister
Cat_swigregister(Cat)
cvar = _novas.cvar
T0 = cvar.T0
C = cvar.C
AU_SEC = cvar.AU_SEC
C_AUDAY = cvar.C_AUDAY
AU = cvar.AU
AU_KM = cvar.AU_KM
GS = cvar.GS
GE = cvar.GE
ERAD = cvar.ERAD
F = cvar.F
ANGVEL = cvar.ANGVEL
RMASS = cvar.RMASS
TWOPI = cvar.TWOPI
ASEC360 = cvar.ASEC360
ASEC2RAD = cvar.ASEC2RAD
DEG2RAD = cvar.DEG2RAD
RAD2DEG = cvar.RAD2DEG

class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_Object()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_Object
    __del__ = lambda self : None;
    __swig_setmethods__["type"] = _novas.Object_type_set
    __swig_getmethods__["type"] = _novas.Object_type_get
    if _newclass:type = _swig_property(_novas.Object_type_get, _novas.Object_type_set)
    __swig_setmethods__["number"] = _novas.Object_number_set
    __swig_getmethods__["number"] = _novas.Object_number_get
    if _newclass:number = _swig_property(_novas.Object_number_get, _novas.Object_number_set)
    __swig_setmethods__["name"] = _novas.Object_name_set
    __swig_getmethods__["name"] = _novas.Object_name_get
    if _newclass:name = _swig_property(_novas.Object_name_get, _novas.Object_name_set)
    __swig_setmethods__["star"] = _novas.Object_star_set
    __swig_getmethods__["star"] = _novas.Object_star_get
    if _newclass:star = _swig_property(_novas.Object_star_get, _novas.Object_star_set)
Object_swigregister = _novas.Object_swigregister
Object_swigregister(Object)

class On_surface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, On_surface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, On_surface, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_On_surface()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_On_surface
    __del__ = lambda self : None;
    __swig_setmethods__["latitude"] = _novas.On_surface_latitude_set
    __swig_getmethods__["latitude"] = _novas.On_surface_latitude_get
    if _newclass:latitude = _swig_property(_novas.On_surface_latitude_get, _novas.On_surface_latitude_set)
    __swig_setmethods__["longitude"] = _novas.On_surface_longitude_set
    __swig_getmethods__["longitude"] = _novas.On_surface_longitude_get
    if _newclass:longitude = _swig_property(_novas.On_surface_longitude_get, _novas.On_surface_longitude_set)
    __swig_setmethods__["height"] = _novas.On_surface_height_set
    __swig_getmethods__["height"] = _novas.On_surface_height_get
    if _newclass:height = _swig_property(_novas.On_surface_height_get, _novas.On_surface_height_set)
    __swig_setmethods__["temperature"] = _novas.On_surface_temperature_set
    __swig_getmethods__["temperature"] = _novas.On_surface_temperature_get
    if _newclass:temperature = _swig_property(_novas.On_surface_temperature_get, _novas.On_surface_temperature_set)
    __swig_setmethods__["pressure"] = _novas.On_surface_pressure_set
    __swig_getmethods__["pressure"] = _novas.On_surface_pressure_get
    if _newclass:pressure = _swig_property(_novas.On_surface_pressure_get, _novas.On_surface_pressure_set)
On_surface_swigregister = _novas.On_surface_swigregister
On_surface_swigregister(On_surface)

class Inspace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Inspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Inspace, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_Inspace()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_Inspace
    __del__ = lambda self : None;
    __swig_setmethods__["sc_pos"] = _novas.Inspace_sc_pos_set
    __swig_getmethods__["sc_pos"] = _novas.Inspace_sc_pos_get
    if _newclass:sc_pos = _swig_property(_novas.Inspace_sc_pos_get, _novas.Inspace_sc_pos_set)
    __swig_setmethods__["sc_vel"] = _novas.Inspace_sc_vel_set
    __swig_getmethods__["sc_vel"] = _novas.Inspace_sc_vel_get
    if _newclass:sc_vel = _swig_property(_novas.Inspace_sc_vel_get, _novas.Inspace_sc_vel_set)
Inspace_swigregister = _novas.Inspace_swigregister
Inspace_swigregister(Inspace)

class observer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, observer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, observer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_observer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_observer
    __del__ = lambda self : None;
    __swig_setmethods__["where"] = _novas.observer_where_set
    __swig_getmethods__["where"] = _novas.observer_where_get
    if _newclass:where = _swig_property(_novas.observer_where_get, _novas.observer_where_set)
    __swig_setmethods__["on_surf"] = _novas.observer_on_surf_set
    __swig_getmethods__["on_surf"] = _novas.observer_on_surf_get
    if _newclass:on_surf = _swig_property(_novas.observer_on_surf_get, _novas.observer_on_surf_set)
    __swig_setmethods__["near_earth"] = _novas.observer_near_earth_set
    __swig_getmethods__["near_earth"] = _novas.observer_near_earth_get
    if _newclass:near_earth = _swig_property(_novas.observer_near_earth_get, _novas.observer_near_earth_set)
observer_swigregister = _novas.observer_swigregister
observer_swigregister(observer)

class Sky(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sky, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sky, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_Sky()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_Sky
    __del__ = lambda self : None;
    __swig_setmethods__["r_hat"] = _novas.Sky_r_hat_set
    __swig_getmethods__["r_hat"] = _novas.Sky_r_hat_get
    if _newclass:r_hat = _swig_property(_novas.Sky_r_hat_get, _novas.Sky_r_hat_set)
    __swig_setmethods__["ra"] = _novas.Sky_ra_set
    __swig_getmethods__["ra"] = _novas.Sky_ra_get
    if _newclass:ra = _swig_property(_novas.Sky_ra_get, _novas.Sky_ra_set)
    __swig_setmethods__["dec"] = _novas.Sky_dec_set
    __swig_getmethods__["dec"] = _novas.Sky_dec_get
    if _newclass:dec = _swig_property(_novas.Sky_dec_get, _novas.Sky_dec_set)
    __swig_setmethods__["dis"] = _novas.Sky_dis_set
    __swig_getmethods__["dis"] = _novas.Sky_dis_get
    if _newclass:dis = _swig_property(_novas.Sky_dis_get, _novas.Sky_dis_set)
    __swig_setmethods__["rv"] = _novas.Sky_rv_set
    __swig_getmethods__["rv"] = _novas.Sky_rv_get
    if _newclass:rv = _swig_property(_novas.Sky_rv_get, _novas.Sky_rv_set)
Sky_swigregister = _novas.Sky_swigregister
Sky_swigregister(Sky)

class RA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RA, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _novas.new_RA()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _novas.delete_RA
    __del__ = lambda self : None;
    __swig_setmethods__["jd_tdb"] = _novas.RA_jd_tdb_set
    __swig_getmethods__["jd_tdb"] = _novas.RA_jd_tdb_get
    if _newclass:jd_tdb = _swig_property(_novas.RA_jd_tdb_get, _novas.RA_jd_tdb_set)
    __swig_setmethods__["ra_cio"] = _novas.RA_ra_cio_set
    __swig_getmethods__["ra_cio"] = _novas.RA_ra_cio_get
    if _newclass:ra_cio = _swig_property(_novas.RA_ra_cio_get, _novas.RA_ra_cio_set)
RA_swigregister = _novas.RA_swigregister
RA_swigregister(RA)


def AppStar(*args):
  return _novas.AppStar(*args)
AppStar = _novas.AppStar

def AppPlanet(*args):
  return _novas.AppPlanet(*args)
AppPlanet = _novas.AppPlanet

def TopoStar(*args):
  return _novas.TopoStar(*args)
TopoStar = _novas.TopoStar

def TopoPlanet(*args):
  return _novas.TopoPlanet(*args)
TopoPlanet = _novas.TopoPlanet

def VirtualStar(*args):
  return _novas.VirtualStar(*args)
VirtualStar = _novas.VirtualStar

def VirtualPlanet(*args):
  return _novas.VirtualPlanet(*args)
VirtualPlanet = _novas.VirtualPlanet

def LocalStar(*args):
  return _novas.LocalStar(*args)
LocalStar = _novas.LocalStar

def LocalPlanet(*args):
  return _novas.LocalPlanet(*args)
LocalPlanet = _novas.LocalPlanet

def AstroStar(*args):
  return _novas.AstroStar(*args)
AstroStar = _novas.AstroStar

def AstroPlanet(*args):
  return _novas.AstroPlanet(*args)
AstroPlanet = _novas.AstroPlanet

def MeanStar(*args):
  return _novas.MeanStar(*args)
MeanStar = _novas.MeanStar

def SiderealTime(*args):
  return _novas.SiderealTime(*args)
SiderealTime = _novas.SiderealTime

def Equ2Hor(*args):
  return _novas.Equ2Hor(*args)
Equ2Hor = _novas.Equ2Hor

def Cal2JD(*args):
  return _novas.Cal2JD(*args)
Cal2JD = _novas.Cal2JD

def JD2Cal(*args):
  return _novas.JD2Cal(*args)
JD2Cal = _novas.JD2Cal

def ETilt(*args):
  return _novas.ETilt(*args)
ETilt = _novas.ETilt

def EphemOpen():
  return _novas.EphemOpen()
EphemOpen = _novas.EphemOpen

def EphemClose():
  return _novas.EphemClose()
EphemClose = _novas.EphemClose

def GetLeapSec(*args):
  return _novas.GetLeapSec(*args)
GetLeapSec = _novas.GetLeapSec

def GetIersData(*args):
  return _novas.GetIersData(*args)
GetIersData = _novas.GetIersData

def Ter2Cel(*args):
  return _novas.Ter2Cel(*args)
Ter2Cel = _novas.Ter2Cel

def Cel2Ter(*args):
  return _novas.Cel2Ter(*args)
Cel2Ter = _novas.Cel2Ter

def Vector2Radec(*args):
  return _novas.Vector2Radec(*args)
Vector2Radec = _novas.Vector2Radec

def Equ2Ecl(*args):
  return _novas.Equ2Ecl(*args)
Equ2Ecl = _novas.Equ2Ecl

def GCRS2Equ(*args):
  return _novas.GCRS2Equ(*args)
GCRS2Equ = _novas.GCRS2Equ
# This file is compatible with both classic and new-style classes.


