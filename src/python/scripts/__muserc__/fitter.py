# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fitter', [dirname(__file__)])
        except ImportError:
            import _fitter
            return _fitter
        if fp is not None:
            try:
                _mod = imp.load_module('_fitter', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fitter = swig_import_helper()
    del swig_import_helper
else:
    import _fitter
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class fitter(_object):
    """Proxy of C++ casac::fitter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fitter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fitter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> fitter"""
        this = _fitter.new_fitter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fitter.delete_fitter
    __del__ = lambda self : None;
    def gauss1d(self, *args, **kwargs):
        """
        gauss1d(self, y=std::vector< double >(), x=std::vector< double >(), mask=std::vector< bool >(), 
            pampest=initialize_variant(""), pcenterest=initialize_variant(""), pfwhmest=initialize_variant("")) -> record *

        Summary
        	Fit any number of one dimensional Gaussians.

        Description
        	

                

        Input Parameters:
        	y		 The array of y values. 
        	x		 The array of x values. If specified, must have the same length as y. If not specified, integral values from 0 to len(y)-1 are generated. 
        	mask		 Mask array. Values are masked where this array is False. If specified, must have the same length as y. If not specified, all values are assumed True (no mask).. 
        	pampest		 Initial estimate PCF profile amplitudes. 
        	pcenterest	 Initial estimate PCF profile centers. 
        	pfwhmest	 Initial estimate PCF profile FWHMs. 
        	
        Example:
        	

                
        --------------------------------------------------------------------------------
        	      
        """
        return _fitter.fitter_gauss1d(self, *args, **kwargs)

    def logtranspoly(self, *args, **kwargs):
        """
        logtranspoly(self, y=std::vector< double >(), x=std::vector< double >(), mask=std::vector< bool >(), 
            estimates=std::vector< double >()) -> record *

        Summary
        	A logarithmic transformed polynomial, ln(y) = c_0 + c_1*ln(x) + c_2*ln(x)**2 + ... + c_n*ln(x)**(n)

        Description
        	

                

        Input Parameters:
        	y		 The array of y values, which will be converted to ln(y) before fitting. 
        	x		 The array of x values. If specified, must have the same length as y. If not specified, integral values from 0 to len(y)-1 are generated. 
        	mask		 Mask array. Values are masked where this array is False. If specified, must have the same length as y. If not specified, all values are assumed True (no mask).. 
        	estimates	 Initial estimate of parameters. 
        	
        Example:
        	

                
        --------------------------------------------------------------------------------
        	      
        """
        return _fitter.fitter_logtranspoly(self, *args, **kwargs)

    def poly(self, *args, **kwargs):
        """
        poly(self, y=std::vector< double >(), x=std::vector< double >(), mask=std::vector< bool >(), 
            estimates=std::vector< double >()) -> record *

        Summary
        	A polynomial, c_0 + c_1*x + c_2*x**2 + ... + c_n*x**n

        Description
        	

                

        Input Parameters:
        	y		 The array of y values. 
        	x		 The array of x values. If specified, must have the same length as y. If not specified, integral values from 0 to len(y)-1 are generated. 
        	mask		 Mask array. Values are masked where this array is False. If specified, must have the same length as y. If not specified, all values are assumed True (no mask).. 
        	estimates	 Initial estimate of parameters. 
        	
        Example:
        	

                
        --------------------------------------------------------------------------------
        	      
        """
        return _fitter.fitter_poly(self, *args, **kwargs)

    def powerlogpoly(self, *args, **kwargs):
        """
        powerlogpoly(self, y=std::vector< double >(), x=std::vector< double >(), mask=std::vector< bool >(), 
            estimates=std::vector< double >()) -> record *

        Summary
        	A power logarithmic polynomial, c_0*x**(c_1 + c_2*ln(x) + c_3*ln(x)**2 + ... + c_n*ln(x)**(n-1)

        Description
        	

                

        Input Parameters:
        	y		 The array of y values. 
        	x		 The array of x values. If specified, must have the same length as y. If not specified, integral values from 0 to len(y)-1 are generated. 
        	mask		 Mask array. Values are masked where this array is False. If specified, must have the same length as y. If not specified, all values are assumed True (no mask).. 
        	estimates	 Initial estimate of parameters. 
        	
        Example:
        	

                
        --------------------------------------------------------------------------------
        	      
        """
        return _fitter.fitter_powerlogpoly(self, *args, **kwargs)

fitter_swigregister = _fitter.fitter_swigregister
fitter_swigregister(fitter)

# This file is compatible with both classic and new-style classes.


