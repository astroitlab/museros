# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_singledishms', [dirname(__file__)])
        except ImportError:
            import _singledishms
            return _singledishms
        if fp is not None:
            try:
                _mod = imp.load_module('_singledishms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _singledishms = swig_import_helper()
    del swig_import_helper
else:
    import _singledishms
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class singledishms(_object):
    """Proxy of C++ casac::singledishms class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, singledishms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, singledishms, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> singledishms"""
        this = _singledishms.new_singledishms()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _singledishms.delete_singledishms
    __del__ = lambda self : None;
    def open(self, *args, **kwargs):
        """
        open(self, ms_name=string("")) -> bool

        Summary
        	Open a new MeasurementSet for processing after closing current MeasurementSet
           

        Description
        	
        Close the current MeasurementSet and open a new MeasurementSet
        instead. The current state of {	t sdms} is retained, except for
        the data selection.


        Input Parameters:
        	ms_name		 New MeasurementSet to be processed 
        	
        Example:
        	
        sdms.open('m100_sd.ms')

        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_open(self, *args, **kwargs)

    def close(self):
        """
        close(self) -> bool

        Summary
        	Close the {tt sdms} tool, with data written on disk, keeping sdms running for future use
           

        Description
        	
        This is used to close {	t sdms} tools. Note that the
        data is written to disk and detached from {	t sdms} tool.
        This is a synonym for done.
           
        Example:
        	
        sdms.close()
           
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_close(self)

    def done(self):
        """
        done(self) -> bool

        Summary
        	Close the {tt sdms} tool

        Description
        	
        This is used to close and {	t sdms} tools. Note that the
        data is written to disk  and detached from {	t sdms} tool.
        This is a synonym for close.
          
        Example:
        	
        sdms.done()
           
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_done(self)

    def name(self):
        """
        name(self) -> string

        Summary
        	Provide the name of the attached MeasurementSet

        Description
        	
            Returns the name of the attached MeasurementSet.
          
        Example:
        	
        sdms.name()
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_name(self)

    def _scale(self, *args, **kwargs):
        """
        _scale(self, factor=1.0, datacolumn=string("data"), outfile=string(""), timeaverage=False, timebin=string("0s"), 
            timespan=string("")) -> bool

        Summary
        	Multiply a scaling factor to spectra
          

        Description
        	
        Multipy a scaling factor to selected spectra.
          

        Input Parameters:
        	factor		 the scaling factor 1.0 
        	datacolumn	 the name of data column to process data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	timeaverage	 Average data in time. false 
        	timebin		 Bin width for time averaging. 0s 
        	timespan	 Span the timebin across 'scan', 'state', 'field', or a combination of them (e.g., 'scan,state'). 
        	
        Example:
        	
        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.scale(factor=2.0)
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms__scale(self, *args, **kwargs)

    def subtract_baseline(self, *args, **kwargs):
        """
        subtract_baseline(self, datacolumn=string("data"), outfile=string(""), bltable=string(""), blformat=string(""), 
            bloutput=string(""), dosubtract=True, spw=initialize_variant(""), pol=initialize_variant(""), 
            blfunc=string("poly"), order=5, clip_threshold_sigma=3.0, 
            num_fitting_max=1, linefinding=False, threshold=5.0, avg_limit=4, 
            minwidth=4, edge=initialize_vector(2,(int)0, (int)0)) -> bool

        Summary
        	Invoke baseline subtraction
          

        Description
        	
        Fit baseline and subtract it from selected spectra
          

        Input Parameters:
        	datacolumn	 the name of data column to process data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bltable		 The name of Baseline Table to be output 
        	blformat	 The name(s) of Baseline Format to be output 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	pol		 Select data by polarization(s). 
        	blfunc		 baseline function poly 
        	order		 polynomial order 5 
        	clip_threshold_sigma	 threshold for clipping in unit of sigma 3.0 
        	num_fitting_max	 maximum number of recursive clipping 1 
        	linefinding	 do line finding false 
        	threshold	 S/N threshold for linefinder 5.0 
        	avg_limit	 channel averaging for broad lines 4 
        	minwidth	 the minimum channel width to detect as a line 4 
        	edge		 channels to drop at beginning and end of spectrum 00 
        	
        Example:
        	
        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline(order=3,clip_threshold_sigma=5.0,num_fitting_max=6)
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_subtract_baseline(self, *args, **kwargs)

    def subtract_baseline_cspline(self, *args, **kwargs):
        """
        subtract_baseline_cspline(self, datacolumn=string("data"), outfile=string(""), bltable=string(""), blformat=string(""), 
            bloutput=string(""), dosubtract=True, spw=initialize_variant(""), pol=initialize_variant(""), 
            npiece=5, clip_threshold_sigma=3.0, num_fitting_max=1, 
            linefinding=False, threshold=5.0, avg_limit=4, minwidth=4, edge=initialize_vector(2,(int)0, (int)0)) -> bool

        Summary
        	Invoke baseline subtraction
          

        Description
        	
        Fit baseline and subtract it from selected spectra
          

        Input Parameters:
        	datacolumn	 the name of data column to process data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bltable		 The name of Baseline Table to be output 
        	blformat	 The name(s) of Baseline Format to be output 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	pol		 Select data by polarization(s). 
        	npiece		 cspline npice 5 
        	clip_threshold_sigma	 threshold for clipping in unit of sigma 3.0 
        	num_fitting_max	 maximum number of recursive clipping 1 
        	linefinding	 do line finding false 
        	threshold	 S/N threshold for linefinder 5.0 
        	avg_limit	 channel averaging for broad lines 4 
        	minwidth	 the minimum channel width to detect as a line 4 
        	edge		 channels to drop at beginning and end of spectrum 00 
        	
        Example:
        	
        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_cspline(npiece=3,clip_threshold_sigma=5.0,num_fitting_max=6)
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_subtract_baseline_cspline(self, *args, **kwargs)

    def subtract_baseline_variable(self, *args, **kwargs):
        """
        subtract_baseline_variable(self, datacolumn=string("data"), outfile=string(""), bltable=string(""), blformat=string(""), 
            bloutput=string(""), dosubtract=True, spw=initialize_variant(""), pol=initialize_variant(""), 
            blparam=string("")) -> bool

        Summary
        	Invoke baseline subtraction by parameters stored in a file.
          

        Description
        	
        Fit baseline and subtract it from selected spectra.
        Fit parameters for each spectrum are obtained from a text file.
          

        Input Parameters:
        	datacolumn	 the name of data column to process data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	bltable		 The name of Baseline Table to be output 
        	blformat	 The name(s) of Baseline Format to be output 
        	bloutput	 The name(s) of Baseline to be output 
        	dosubtract	 Execute baseline subtraction from the input data true 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	pol		 Select data by polarization(s). 
        	blparam		 The name of text file that stores fit parameters for each spectrum of selected MS 
        	
        Example:
        	
        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.subtract_baseline_variable('m100_fitparam.txt')
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_subtract_baseline_variable(self, *args, **kwargs)

    def apply_baseline_table(self, *args, **kwargs):
        """
        apply_baseline_table(self, bltable=string(""), datacolumn=string("data"), spw=initialize_variant(""), outfile=string("")) -> bool

        Summary
        	Apply baseline table to MS.
          

        Description
        	
        For each row of given baseline table, read baseline parameters, 
        constrct baseline, then subtract it from the corresponding spectrum 
        in the MS.
          

        Input Parameters:
        	bltable		 The name of input Baseline Table 
        	datacolumn	 the name of data column to process data data float_data corrected 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	outfile		 The name of output MeasurementSet 
        	
        Example:
        	
        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.apply_baseline_table('m100_sd.bltable')
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_apply_baseline_table(self, *args, **kwargs)

    def fit_line(self, *args, **kwargs):
        """
        fit_line(self, datacolumn=string("data"), spw=initialize_variant(""), pol=initialize_variant(""), 
            fitfunc=string("gaussian"), nfit=string("0"), tempfile=string(""), tempoutfile=string("")) -> bool

        Summary
        	Invoke line fitting
          

        Description
        	
        Fit line profile to selected spectra and obtain the best-fit parameter values
          

        Input Parameters:
        	datacolumn	 The name of data column to process data data float_data corrected_data 
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	pol		 Select data by polarization(s). 
        	fitfunc		 Function of line profile gaussian gaussian lorentzian 
        	nfit		 Comma-separated numbers of gaussian/lorentzian lines to fit in maskline region 0 
        	tempfile	 The name of temporary file to keep fitting results 
        	tempoutfile	 The name of temporary ms file 
        	
        Example:
        	
        sdms.open('m100_sd.ms')
        sdms.set_selection(field='M100')
        sdms.fit_line(fitfunc='gauss',spw='0:1000~2000;4000~5000',nfit=[1,1])
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_fit_line(self, *args, **kwargs)

    def set_selection(self, *args, **kwargs):
        """
        set_selection(self, spw=initialize_variant(""), field=initialize_variant(""), antenna=initialize_variant(""), 
            timerange=initialize_variant(""), scan=initialize_variant(""), observation=initialize_variant(""), 
            polarization=initialize_variant(""), beam=initialize_variant(""), 
            intent=initialize_variant(""), taql=string("")) -> bool

        Summary
        	Select Measurementset to process

        Description
        	

          

        Input Parameters:
        	spw		 Spectral Window Ids (0 relative) to select; -1 interpreted as all 
        	field		 Field Ids (0 relative) or Field names (msselection syntax and wilcards are used) to select 
        	antenna		 Antenna Ids (0 relative) or Antenna names (msselection syntax and wilcards are used) to select 
        	timerange	 Limit data selected to be within a given time range. Syntax is the defined in the msselection link 
        	scan		 Limit data selected on scan numbers. Syntax is the defined in the msselection link 
        	observation	 Select data by observation ID(s). The syntax is the same as for scan numbers. 
        	polarization	 Select data by polarization(s). 
        	beam		 Beam Ids (0 relative) to select; CURRENTLY NOT AVAILABLE!!! 
        	intent		 Select data by intent(s) 
        	taql		 For the TAQL experts, flexible data selection using the TAQL syntax 
        	
        Example:
        	
        sdms.set_selection(field='M100', spw='3,5')
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_set_selection(self, *args, **kwargs)

    def smooth(self, *args, **kwargs):
        """
        smooth(self, type=string("gaussian"), width=0.0, datacolumn=string("data"), outfile=string("")) -> bool

        Summary
        	Smooth data with arbitrary smoothing kernel

        Description
        	
          NOTE: currently only Gaussian kernel is supported.
          

        Input Parameters:
        	type		 Smoothing kernel type gaussian gaussian 
        	width		 Smoothing kernel width 0.0 
        	datacolumn	 the name of data column to process data data float_data corrected 
        	outfile		 The name of output MeasurementSet 
        	
        Example:
        	
          
        --------------------------------------------------------------------------------
        	      
        """
        return _singledishms.singledishms_smooth(self, *args, **kwargs)

singledishms_swigregister = _singledishms.singledishms_swigregister
singledishms_swigregister(singledishms)

# This file is compatible with both classic and new-style classes.


