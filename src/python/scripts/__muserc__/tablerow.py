# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tablerow', [dirname(__file__)])
        except ImportError:
            import _tablerow
            return _tablerow
        if fp is not None:
            try:
                _mod = imp.load_module('_tablerow', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tablerow = swig_import_helper()
    del swig_import_helper
else:
    import _tablerow
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class tablerow(_object):
    """Proxy of C++ casac::tablerow class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tablerow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tablerow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> tablerow"""
        this = _tablerow.new_tablerow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tablerow.delete_tablerow
    __del__ = lambda self : None;
    def set(self, *args, **kwargs):
        """
        set(self, tab, columns=std::vector< string >(1, ""), exclude=False) -> bool

        Summary
        	Set table and columns to be accessed

        Description
        	
        Reset the 	exttt{tablerow} tool to use the given table and columns.


        Input Parameters:
        	tab		 table to be accessed, expects a table tool 
        	columns		 Array of column names all 
        	exclude		 Exclude instead of include the named columns? false 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tablerow.tablerow_set(self, *args, **kwargs)

    def get(self, *args, **kwargs):
        """
        get(self, rownr) -> record *

        Summary
        	Get a table row

        Description
        	
        Get the values in the given row. The values are returned as a record
        where the field names are the column names.
        Note that rows are numbered starting at 1.


        Input Parameters:
        	rownr		 Row number 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tablerow.tablerow_get(self, *args, **kwargs)

    def put(self, *args, **kwargs):
        """
        put(self, rownr, value, matchingfields=True) -> bool

        Summary
        	Put a table row

        Description
        	
        Put the values in the given record into the given table row.
        By default only the fields will be put with a name matching a column
        name in the 	exttt{tablerow} tool.
        However, if 	exttt{matchingfields=F} the given record must exactly
        match the tablerow layout (i.e. the column names in it). This is
        faster and can be used to put a record acquired using the /texttt{get}
        function.

        Note that rows are numbered starting at 1.


        Input Parameters:
        	rownr		 Row number 
        	value		 Values to put 
        	matchingfields	 F=value record must match tablerow layout true 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tablerow.tablerow_put(self, *args, **kwargs)

    def close(self):
        """
        close(self) -> bool

        Summary
        	Close the tablerow

        Description
        	
        Close the tablerow. It can thereafter be reused using the set function.

        --------------------------------------------------------------------------------
        	      
        """
        return _tablerow.tablerow_close(self)

    def done(self):
        """
        done(self) -> bool

        Summary
        	End the tablerow tool

        Description
        	
        Close the 	exttt{tablerow} tool and free up all memory.

        --------------------------------------------------------------------------------
        	      
        """
        return _tablerow.tablerow_done(self)

tablerow_swigregister = _tablerow.tablerow_swigregister
tablerow_swigregister(tablerow)

# This file is compatible with both classic and new-style classes.


