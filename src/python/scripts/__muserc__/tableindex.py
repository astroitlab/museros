# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tableindex', [dirname(__file__)])
        except ImportError:
            import _tableindex
            return _tableindex
        if fp is not None:
            try:
                _mod = imp.load_module('_tableindex', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tableindex = swig_import_helper()
    del swig_import_helper
else:
    import _tableindex
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class tableindex(_object):
    """Proxy of C++ casac::tableindex class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tableindex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tableindex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> tableindex"""
        this = _tableindex.new_tableindex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tableindex.delete_tableindex
    __del__ = lambda self : None;
    def set(self, *args, **kwargs):
        """
        set(self, tab, columns, sort=True) -> bool

        Summary
        	Set table and columns to be indexed

        Description
        	
        Reset the 	exttt{tableindex} tool to index the given table and
        columns. It works similar to the tableindex constructor.


        Input Parameters:
        	tab		 table to be indexed, wants a table tool 
        	columns		 column names 
        	sort		 is a sort of the key values needed? true 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_set(self, *args, **kwargs)

    def isunique(self):
        """
        isunique(self) -> bool

        Summary
        	Are all key values in the index unique?

        Description
        	
        T is returned if all key values in the index are unique. In that case
        the function rownr can also be used.

        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_isunique(self)

    def setchanged(self, *args, **kwargs):
        """
        setchanged(self, columns=std::vector< string >(1, "")) -> bool

        Summary
        	Tell the index that columns have changed

        Description
        	
        When data are changed in an indexed column, the index should be
        updated. The tableindex tool recognizes addition and deletion of rows
        and updates the index accordingly. However, it does not recognize if data in a
        column are changed. This function can be used to tell the tableindex
        that data in one or more columns are changed and force it to update
        the index. If no column names are given it assumes all columns have changed.


        Input Parameters:
        	columns		 names of changed columns all 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_setchanged(self, *args, **kwargs)

    def rownr(self, *args, **kwargs):
        """
        rownr(self, key) -> int

        Summary
        	Find the row number matching the search value

        Description
        	
        Find the row number (1-relative) of the row containing the given
        search value. If no row is found, 0 is returned.
        This function can only be used if the index contains unique
        key values (thus if isunique
        returns T), otherwise 	exttt{rownrs} should be used. 
        \Normally the search value should be given as a record in which the
        field names match the column names in the index. However, if the index
        is formed from a single column the search value can be given directly
        as shown in the examples in the introduction. The data type should be
        correct though.


        Input Parameters:
        	key		 search value 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_rownr(self, *args, **kwargs)

    def rownrs(self, *args, **kwargs):
        """
        rownrs(self, key, upperkey=initialize_record("0"), lowerincl=True, upperincl=True) -> std::vector< int >

        Summary
        	Find the row numbers matching search values

        Description
        	
        Find the row numbers of the rows matching the given search value or
        interval. An interval
        is given if the 	exttt{upperkey} argument is also given. In that case
        the 3rd and 4th argument determine if the boundaries of the interval
        are inclusive (i.e. part of the interval).
        \As in function 	exttt{rownr} the search values must be given as a
        record if the index consists of multiple columns.


        Input Parameters:
        	key		 search value 
        	upperkey	 end of search interval 0 
        	lowerincl	 include lower boundary true 
        	upperincl	 include upper boundary? true 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_rownrs(self, *args, **kwargs)

    def close(self):
        """
        close(self) -> bool

        Summary
        	Close the tableindex

        Description
        	
        Close the tableindex. It can thereafter be reused using the set function.

        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_close(self)

    def done(self):
        """
        done(self) -> bool

        Summary
        	End the tableindex tool

        Description
        	
        End the tableindex and free up all memory. It cannot be reused anymore.

        --------------------------------------------------------------------------------
        	      
        """
        return _tableindex.tableindex_done(self)

tableindex_swigregister = _tableindex.tableindex_swigregister
tableindex_swigregister(tableindex)

# This file is compatible with both classic and new-style classes.


