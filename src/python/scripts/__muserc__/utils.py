# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils', [dirname(__file__)])
        except ImportError:
            import _utils
            return _utils
        if fp is not None:
            try:
                _mod = imp.load_module('_utils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utils = swig_import_helper()
    del swig_import_helper
else:
    import _utils
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class utils(_object):
    """Proxy of C++ casac::utils class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, utils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, utils, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> utils"""
        this = _utils.new_utils()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _utils.delete_utils
    __del__ = lambda self : None;
    def verify(self, *args, **kwargs):
        """
        verify(self, input=initialize_record(""), xmldescriptor=initialize_variant(""), throwexecpt=False) -> bool

        Summary
        	Verifies an input record against an XML interface description of took or task

        Description
        	

        Input Parameters:
        	input		 The input record to verify 
        	xmldescriptor	 XML description, either record or url 
        	throwexecpt	 Throw an exception if the verification fails false 
        	
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_verify(self, *args, **kwargs)

    def setconstraints(self, *args, **kwargs):
        """
        setconstraints(self, xmldescriptor=initialize_variant("")) -> bool

        Summary
        	Sets the internal contraints records from an XML file

        Input Parameters:
        	xmldescriptor	 XML description, either record or url 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_setconstraints(self, *args, **kwargs)

    def verifyparam(self, *args, **kwargs):
        """
        verifyparam(self, param=initialize_record("")) -> bool

        Summary
        	Verifies an individual parameter against a prespecified constraints record

        Input Parameters:
        	param		 Parameter name:value pair to verify 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_verifyparam(self, *args, **kwargs)

    def expandparam(self, *args, **kwargs):
        """
        expandparam(self, name=string(""), value=initialize_variant("")) -> variant *

        Summary
        	If a param is an enum it will minmatch the enum value and return the full value otherwise it just returns the value

        Input Parameters:
        	name		 Parameter name to expand 
        	value		 Value of the parameter 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_expandparam(self, *args, **kwargs)

    def torecord(self, *args, **kwargs):
        """
        torecord(self, input) -> record *

        Summary
        	Transforms an XML string into a record

        Description
        	

        Input Parameters:
        	input		 XML string, maybe a URL 
        	
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_torecord(self, *args, **kwargs)

    def toxml(self, *args, **kwargs):
        """
        toxml(self, input=initialize_record(""), asfile=False, filename=string("recordas.xml")) -> string

        Summary
        	Turns a record into an xml string

        Description
        	

        Input Parameters:
        	input		 name of thing to viewe 
        	asfile		 write the xml as a file false 
        	filename	 if asfile is true then output filename recordas.xml 
        	
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_toxml(self, *args, **kwargs)

    def getrc(self, *args, **kwargs):
        """
        getrc(self, rcvar=string("")) -> string

        Input Parameters:
        	rcvar		 Returns the value of the rc variable given. If no value is give it returns the root directory of CASA. 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_getrc(self, *args, **kwargs)

    def removetable(self, *args, **kwargs):
        """
        removetable(self, tablenames=std::vector< string >(1, "")) -> bool

        Input Parameters:
        	tablenames	 Removes tables safely 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_removetable(self, *args, **kwargs)

    def tableinfo(self, *args, **kwargs):
        """
        tableinfo(self, tablename=string("")) -> record *

        Summary
        	Get information about a particular table

        Description
        	
            Currently this only returns the pid of the process locking the table (lockpid), if the lock
            is permanent (lockperm), and the status (lockstatus) -- 'not in use', 'open', 'read', 'write',
            or 'unknown'. However, the hope is that this will eventually return a complete description of
            the table.
          

        Input Parameters:
        	tablename	 path to table 
        	
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_tableinfo(self, *args, **kwargs)

    def lockedtables(self):
        """
        lockedtables(self) -> std::vector< std::string >

        Summary
        	get the tables locked by this process

        Description
        	
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_lockedtables(self)

    def hostinfo(self):
        """
        hostinfo(self) -> record *

        Summary
        	returns host information

        Description
        	
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_hostinfo(self)

    def c_exception(self):
        """
        c_exception(self) -> string

        Summary
        	Returns detailed information about last C-level exception

        Description
        	Returns detailed information from the last CASA C++ exception (i.e., AipsError).  The
                       exception message and the stack trace (mangled; use the shell's c++filt to demangle)
                       from the last CASA C++ exception.  The information is from the last one generated
                       and may not represent an exception from the last action; c\_exception\_clear can be
                       used to remove stale information.  The information's exception might also
                       have been caught in the C++ code and not have been translated into a Python-level
                       exception.
          
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_c_exception(self)

    def c_exception_clear(self):
        """
        c_exception_clear(self)

        Summary
        	Clears information about last C-level exception

        Description
        	Clears the CASA C++ exception information.  This allows the user to be sure that
                       information retrieved using c\_exception is not from an exception in the
                       distant past.
          
        Example:
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _utils.utils_c_exception_clear(self)

utils_swigregister = _utils.utils_swigregister
utils_swigregister(utils)

# This file is compatible with both classic and new-style classes.


