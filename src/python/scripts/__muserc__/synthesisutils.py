# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_synthesisutils', [dirname(__file__)])
        except ImportError:
            import _synthesisutils
            return _synthesisutils
        if fp is not None:
            try:
                _mod = imp.load_module('_synthesisutils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _synthesisutils = swig_import_helper()
    del swig_import_helper
else:
    import _synthesisutils
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class synthesisutils(_object):
    """Proxy of C++ casac::synthesisutils class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synthesisutils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synthesisutils, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> synthesisutils"""
        this = _synthesisutils.new_synthesisutils()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _synthesisutils.delete_synthesisutils
    __del__ = lambda self : None;
    def contdatapartition(self, *args, **kwargs):
        """
        contdatapartition(self, selpars=initialize_record(""), npart=1) -> record *

        Summary
        	Partition data selection parameters for continuum imaging

        Description
        	


        Input Parameters:
        	selpars		 All selection parameters for one or more MSs 
        	npart		 Number of partitions 1 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_contdatapartition(self, *args, **kwargs)

    def cubedatapartition(self, *args, **kwargs):
        """
        cubedatapartition(self, selpars=initialize_record(""), npart=1, fstart=initialize_variant("1GHz"), fend=initialize_variant("1.5GHz"), 
            frame=string("LSRK")) -> record *

        Summary
        	Partition data selection parameters for CUBE imaging

        Description
        	
          returns a dictionary with data spectral parttiion that maps  data  to  nparts
          of the input range frequency... usually to be used for doing data selection
          when imaging a cube from fstart to fend in npart subcubes



        Input Parameters:
        	selpars		 All selection parameters for one or more MSs 
        	npart		 Number of partitions 1 
        	fstart		 start frequency of cube image 1GHz 
        	fend		 end frequency of cube image 1.5GHz 
        	frame		 frame of fstart and fend LSRK 
        	
        Example:
        	
        ##make a synthesisutils tool
        siu=casac.synthesisutils()
        ### define first ms parameters
        msrec={'msname':'ngc5921.ms.contsub', 'field':'0', 'spw':'0'}
        pars={'ms0':msrec}
        ##  can add ms1, ms2 etc for multiple ms  into dictionary pars

        ##now get the data selections for 20 subpart of a cube that 
        ## spans from 1.412787GHz to 1.413287GHz
        siu.cubedatapartition(selprs=pars, npart=20, fstart='1.412787GHz', fend='1.413287GHz', frame='LSRK')


        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_cubedatapartition(self, *args, **kwargs)

    def cubeimagepartition(self, *args, **kwargs):
        """
        cubeimagepartition(self, impars=initialize_record(""), npart=1) -> record *

        Summary
        	Partition image cube parameters for CUBE deconvolution

        Description
        	


        Input Parameters:
        	impars		 All imaging parameters for one or more image fields 
        	npart		 Number of partitions 1 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_cubeimagepartition(self, *args, **kwargs)

    def cubedataimagepartition(self, *args, **kwargs):
        """
        cubedataimagepartition(self, selpars=initialize_record(""), incsys=initialize_record(""), npart=1, nchannel=1) -> record *

        Summary
        	Partition data/image cube parameters for CUBE deconvolution

        Description
        	


        Input Parameters:
        	selpars		 All selection parameters for one or more MSs 
        	incsys		 input coordinate system 
        	npart		 Number of partitions 1 
        	nchannel	 Number of channels 1 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_cubedataimagepartition(self, *args, **kwargs)

    def checkselectionparams(self, *args, **kwargs):
        """
        checkselectionparams(self, selpars=initialize_record("")) -> record *

        Summary
        	Check and Fix Selection Parameters for one MS

        Description
        	


        Input Parameters:
        	selpars		 All selection parameters for one MS 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_checkselectionparams(self, *args, **kwargs)

    def checkimageparams(self, *args, **kwargs):
        """
        checkimageparams(self, impars=initialize_record("")) -> record *

        Summary
        	Check and Fix Imaging Parameters for one field

        Description
        	


        Input Parameters:
        	impars		 All imaging parameters for one image-field 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_checkimageparams(self, *args, **kwargs)

    def checkgridparams(self, *args, **kwargs):
        """
        checkgridparams(self, gridpars=initialize_record("")) -> record *

        Summary
        	Check and Fix Gridding/FTM Parameters for one field

        Description
        	


        Input Parameters:
        	gridpars	 All gridding/ftm parameters for one image-field 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_checkgridparams(self, *args, **kwargs)

    def updateimpars(self, *args, **kwargs):
        """
        updateimpars(self, impars=initialize_record("")) -> record *

        Summary
        	check the consistency between the csys record and other impars and update/modify impars if necessary

        Description
        	                                                                                                                                    


        Input Parameters:
        	impars		 All image parameters of one image-field 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_updateimpars(self, *args, **kwargs)

    def done(self):
        """
        done(self) -> bool

        Summary
        	Close the tool

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisutils.synthesisutils_done(self)

synthesisutils_swigregister = _synthesisutils.synthesisutils_swigregister
synthesisutils_swigregister(synthesisutils)

# This file is compatible with both classic and new-style classes.


