# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_synthesisnormalizer', [dirname(__file__)])
        except ImportError:
            import _synthesisnormalizer
            return _synthesisnormalizer
        if fp is not None:
            try:
                _mod = imp.load_module('_synthesisnormalizer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _synthesisnormalizer = swig_import_helper()
    del swig_import_helper
else:
    import _synthesisnormalizer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class synthesisnormalizer(_object):
    """Proxy of C++ casac::synthesisnormalizer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synthesisnormalizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synthesisnormalizer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> synthesisnormalizer"""
        this = _synthesisnormalizer.new_synthesisnormalizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _synthesisnormalizer.delete_synthesisnormalizer
    __del__ = lambda self : None;
    def setupnormalizer(self, *args, **kwargs):
        """
        setupnormalizer(self, normpars=initialize_record("")) -> bool

        Summary
        	Set parameters to control scatter/gather operations

        Description
        	


        Input Parameters:
        	normpars	 All parameters for gather/scatter. Mainly file names 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_setupnormalizer(self, *args, **kwargs)

    def gatherweightdensity(self):
        """
        gatherweightdensity(self) -> bool

        Summary
        	Gather Gridded Weight images

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_gatherweightdensity(self)

    def scatterweightdensity(self):
        """
        scatterweightdensity(self) -> bool

        Summary
        	Scatter summed Gridded Weight images

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_scatterweightdensity(self)

    def gatherpsfweight(self):
        """
        gatherpsfweight(self) -> bool

        Summary
        	Gather PSFs if needed

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_gatherpsfweight(self)

    def gatherresidual(self):
        """
        gatherresidual(self) -> bool

        Summary
        	Gather Residual Imaged if needed

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_gatherresidual(self)

    def dividepsfbyweight(self):
        """
        dividepsfbyweight(self) -> bool

        Summary
        	Divide psf by weight

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_dividepsfbyweight(self)

    def divideresidualbyweight(self):
        """
        divideresidualbyweight(self) -> bool

        Summary
        	Divide residual by weight

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_divideresidualbyweight(self)

    def dividemodelbyweight(self):
        """
        dividemodelbyweight(self) -> bool

        Summary
        	Divide model by weight

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_dividemodelbyweight(self)

    def multiplymodelbyweight(self):
        """
        multiplymodelbyweight(self) -> bool

        Summary
        	Multiply model by weight

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_multiplymodelbyweight(self)

    def scattermodel(self):
        """
        scattermodel(self) -> bool

        Summary
        	Scatter model if needed

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_scattermodel(self)

    def getimstore(self):
        """
        getimstore(self) -> casac::synthesisimstore *

        Summary
        	Get Image store

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_getimstore(self)

    def setimstore(self, *args, **kwargs):
        """
        setimstore(self, imstore) -> bool

        Summary
        	Set ImageStore

        Description
        	


        Input Parameters:
        	imstore		 Image Store object 
        	
        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_setimstore(self, *args, **kwargs)

    def done(self):
        """
        done(self) -> bool

        Summary
        	Close the tool

        Description
        	

        --------------------------------------------------------------------------------
        	      
        """
        return _synthesisnormalizer.synthesisnormalizer_done(self)

synthesisnormalizer_swigregister = _synthesisnormalizer.synthesisnormalizer_swigregister
synthesisnormalizer_swigregister(synthesisnormalizer)

# This file is compatible with both classic and new-style classes.


